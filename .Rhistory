if(x > 5) {
y <- TRUE
} else {
y <- FALSE
}
y
x <- runif(1, 0, 10) ## creamos un número aleatorio entre 0 y 10
x
if(x > 5) {
y <- TRUE
} else {
y <- FALSE
}
y
x = c(4000, 9000, 9000, 10000); mean(x)
median(x)
library(DescTools)
Mode(x) # mode es diferente de Mode (Case sensitive)
x <- c(29, 13, 62, 4, 63, 96, 1, 90, 50, 46)
quantile(x, 0.25) # cuantil del 25%
quantile(x, c(0.25,0.50,0.75)) # Cuartiles
quantile(x, seq(0.1,0.9, by = 0.1)) # Deciles
IQR(x)
quantile(x, probs = 0.75) - quantile(x, probs = 0.25)
var(x)
sd(x)
ran <- runif(44)
ran
for(i in 1:15) {
numsqr[i] <- ran[i]**2 + 12
print(numsqr[i])
}
for(i in 1:15) {
numsqr[i] <- ran[i]^3 + 12
print(numsqr[i])
}
numsqr <- vector()
for(i in 1:15) {
numsqr[i] <- ran[i]^3 + 12
print(numsqr[i])
}
df.al <- data.frame(ran = ran[1:15], val = el)
df.al <- data.frame(ran = ran[1:15],
val = el)
df.al <- data.frame(ran = ran[1:15],
val = numsqr)
df.al
View(df.al)
set.seed(134)
x <- round(rnorm(100,175,6),1)
x
mean(x)
median(x)
Mode(x)
library(DescTools)
Mode(x)
# Ej. 2
quantile(x, seq(0.1,0.9, by = 0.1))
# Ej. 3
IQR(x)
quantile(x, probs = 0.75) - quantile(x, probs = 0.25)
var(x)
sd(x)
cbind(1:10, 11:20, 21:30)
rbind(1:10, 11:20, 21:30)
cbind(1:10, matrix(11:30, ncol =2))
cbind(data.frame(x = 1:10, y = 11:20), z = 21:30)
X <- matrix(1:49, ncol = 7)
X
apply(X, 1, mean) # cálculo de la media para las filas
library(ggplot2)
names(mtcars)
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point()  # Tipo de geometría, intenta utilizar alguna otra
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el núm de cilindros
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_black() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el núm de cilindros
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_black() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el núm de cilindros
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_dark() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el núm de cilindros
ggplot(mtcars, aes(x = cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl") +  # Lo divide por el núm de cilindros
xlab('Núm de cilindros') +  # Nombre en los ejes
ylab('Caballos de Fuerza')
library(dplyr) # Para usar el operador %>%
data <- read.csv("../Sesion-03/Data/boxp.csv")
# Utilizando la función hist
data <- mtcars
hist(data$Mediciones, breaks = seq(0,300, 20),
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
url <-"https://raw.githubusercontent.com/beduExpert/Programacion-con-R-2021/main/Sesion-03/Data/boxp.csv"
getwd()
getwd("C:/Users/Carlos Alvarez/Desktop/TECP0013ADDAOL2112/Módulo R")
setwd("C:/Users/Carlos Alvarez/Desktop/TECP0013ADDAOL2112/Módulo R")
download.file(url = url, destfile = "ej3-2.csv", mode = "wb")
data <- read.csv("ej3-2.csv")
View(data)
View(data)
head(data)
names(data)
# Utilizando la función hist
hist(data$Mediciones, breaks = seq(0,300, 20),
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
data <- na.omit(data)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 20)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 100)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram()
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
getwd()
data <- read.csv(file.choose())
View(data)
View(data)
hist(data$Alumno,
)
View(data)
View(data)
hist(data,breaks = seq(0,2,)
)
hist(data)
hist(data$Altura)
hist(data$Altura,
main = "Mediciones de los alumnos")
hist(data$Altura,
main = "Mediciones de los alumnos"
x = "Altura"
y = "Frecuencia")
hist(data$Altura,
main = "Mediciones de los alumnos"
xlab = "Altura"
ylab = "Frecuencia")
hist(data$Altura,
main = "Mediciones de los alumnos"
xlab = "Altura"
ylab = "Frecuencia")
hist(data$Altura,
main = "Mediciones de los alumnos",
xlab = "Altura",
ylab = "Frecuencia")
hist(data$Altura,breaks = 20
main = "Mediciones de los alumnos",
xlab = "Altura",
ylab = "Frecuencia")
hist(data$Altura,breaks = 20,
main = "Mediciones de los alumnos",
xlab = "Altura",
ylab = "Frecuencia")
+ geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(altura, aes(Altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(altura, aes(altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
View(data)
View(data)
ggplot(altura, aes(Altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(altura, aes(Altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(Altura, aes(Altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(data, aes(data)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(data, aes(data)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(data, aes(Altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
hist(data$Altura,breaks = 20,
main = "Mediciones de los alumnos",
xlab = "Altura",
ylab = "Frecuencia")
ggplot(data, aes(Altura)) +
geom_histogram(binwidth = 4, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(data, aes(Altura)) +
geom_histogram(binwidth = 20, col = "black", fill = "red") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
ggplot(data, aes(Altura)) +
geom_histogram(binwidth = 2, col = "black", fill = "red") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
hist(data$Altura,breaks = 20,
main = "Mediciones de los alumnos",
xlab = "Altura",
ylab = "Frecuencia")
ggplot(data, aes(Altura)) +
geom_histogram(binwidth = 2, col = "black", fill = "red") +
ggtitle("Histograma de Mediciones") +
xlab("Frecuencia") +
ylab("Alturas") +
theme_light()
(my_scatplot <- ggplot(mtcars,
aes(x = wt, y = mpg)) +
geom_point())
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
View(data)
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "glm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "loess", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "loess", se = F))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "loess", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = F))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", se = T))
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "loess", se = T))
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = mpg ~ poly(wt,2)))
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = mpg ~ poly(wt,2), size = 1))
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = mpg ~ poly(mtcars$wt,2), size = 1))
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = mtcars$mpg ~ poly(mtcars$wt,2), size = 1))
my_scatplot + xlab('Weight (x 1000lbs)') + ylab('Miles per Gallon')
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = mtcars$wt ~ poly(mtcars$mpg,2), size = 1))
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
stat_smooth(method = "lm", formula = y ~ poly(x,2), size = 1))
(my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point())
my_scatplot + labs(x='Weight (x1000lbs)',y='Miles per Gallon',colour='Number of\n Cylinders')
my_scatplot + facet_wrap("cyl")
my_scatplot + facet_grid(am~cyl)
getwd()
setwd("C:/Users/Carlos Alvarez/Desktop/DemoDay")
game_data <- read.csv(file.choose())
View(data)
View(data)
setwd("C:/Users/Carlos Alvarez/Desktop/DemoDay")
game_data <- read.csv(file.choose())
View(game_data)
str(game_data)
library("dplyr")
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%Y-%m-%d"))
View(game_data_date)
str(game_data_date) # Tipo de las variables.
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d-%m-%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d-%Y"))
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
str(game_data) # Tipo de las variables.
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%Y-%m-%d"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%Y/%m/%d"))
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%Y/%m/%d"))
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
str(game_data) # Tipo de las variables.
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%Y/%m/%d"))
View(game_data_date)
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%D/%M/%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d-%m-%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
as.Date(dates, "%m/%d/%y")
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
View(game_data)
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m+/%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
str(game_data) # Tipo de las variables.
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
<-
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '1970-01-01'), na.rm=FALSE)
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '1970-01-01'), na.rm=TRUE)
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '1970-01-01'), na.rm=TRUE)
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '11/23/1998'), na.rm=TRUE)
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '11/23/1998'), na.rm=TRUE)
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '11/23/1998'), na.rm=FALSE)
game_data_date <- mutate(game_data, r.date = na.locf(as.Date(r.date, origin = '11/23/1998'), na.rm=FALSE)
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, "%d/%m/%Y"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, origin = "2000-12-31"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, origin = "2000/12/31"))
game_data_date <- mutate(game_data, r.date = as.Date(r.date, origin = "12/31/2000"))
game_data_date %>% mutate(r.date = as.Date(r.date, origin = "12/31/2000"))
game_data_date <- %>% mutate(r.date = as.Date(r.date, origin = "12/31/2000"))
View(game_data_date)
game_data_date %>% mutate(r.date = as.Date(r.date, origin = "12/31/2000"))
setwd("C:/Users/Carlos Alvarez/Desktop/DemoDay")
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
str(game_data) # Tipo de las variables.
game_data_date %>% mutate(r.date = as.Date(r.date, origin = "12/31/2000"))
View(game_data_date)
game_data %>% mutate(r.date = as.Date(r.date, origin = "12/31/2000"))
game_data %>% mutate(r.date = as.Date(r.date, origin = "11/23/1998"))
game_data %>% mutate(r.date = as.Date(r.date, origin = "11-23-1998"))
install.packages("lubridate")
library("lubridate")
game_data %>% mutate(r.date = as.Date(as.character(r.date), "%m/%d/%Y"))
View(game_data)
str(game_data) # Tipo de las variables.
game_data %>% mutate(r.date = as.Date(r.date, "%Y-%m-%d"))
View(game_data)
game_data_new <- game_data %>% mutate(r.date = as.Date(r.date, "%Y-%m-%d"))
View(game_data_new)
game_data_new <- game_data %>% mutate(r.date = as.Date(r.date, "%m-%d-%Y"))
game_data_new <- game_data %>% mutate(r.date = as.Date(as.character(r.date), "%m-%d-%Y"))
game_data_new <- mdy(r.date)
game_data_new <- mdy(game_data$r.date)
game_data_date <- game_data %>% mutate(mdy(game_data$r.date))
str(game_data) # Tipo de las variables.
str(game_data_date)
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
str(game_data_modified) # Se creo el objeto para las fechas.
game_data_modified <- game_data %>% remove(r.date)
game_data_modified <- game_data %>% remove(game_data$r.date)
game_data_modified_2 <- game_data[,-3]
View(game_data_modified_2)
game_data_modified_2 <- game_data_modified[,-3]
game_data_modified_2 <- game_data_modified[,-3]
game_data_modified_2 <- game_data[,-3]
View(game_data_modified_2)
game_data_modified_2 <- game_data_modified[,-3]
game_data_modified_2 <- game_data_modified[,-4]
game_data_modified_2 <- game_data_modified[,-1]
game_data_modified_new <- game_data_modified[,-1]
game_data_modified_new <- game_data_modified[,-4]
game_data_modified_new <- game_data_modified[,-r.date]
game_data_modified_new <- game_data_modified[,-game_data_modified.date]
game_data_modified_new <- game_data_modified[,-game_data_modified$r.date]
game_data_modified_new <- game_data_modified[,-(game_data_modified$r.date)]
game_data_modified_new <- game_data[,-c(3)]
View(game_data_modified_new)
game_data_modified_new <- game_data_modified[,-c(3)]
View(game_data_date)
game_data_modified_new <- game_data_modified[,-c(13)]
library("dplyr")
install.packages("lubridate")
install.packages("lubridate")
getwd()
setwd("C:/Users/Carlos Alvarez/Desktop/DemoDay")
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
library("dplyr")
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
library("lubridate")
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
str(game_data_modified) # Se creo el objeto para las fechas.
game_data_modified_new <- game_data_modified[,-c(3)]
View(game_data_modified_new)
game_data_modified <- game_data_modified[,-c(3)]
library("dplyr")
library("lubridate")
getwd()
setwd("C:/Users/Carlos Alvarez/Desktop/DemoDay")
game_data <- read.csv(file.choose()) # Usaremos la tabla game_data_exp.
str(game_data) # Tipo de las variables.
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
str(game_data_modified) # Se creo el objeto para las fechas.
game_data_modified <- game_data_modified[,-c(3)]
game_data_modified <- game_data_modified[,-c(3)]
View(game_data_modified)
View(game_data_modified)
View(game_data)
game_data_modified <- game_data_modified[,-c(2)] # Eliminamos la columna extra de las fechas.
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
game_data_modified <- game_data_modified[,-c(3)] # Eliminamos la columna extra de las fechas.
game_data_modified <- game_data %>% rename(name = "Name", platform = "Console", score = "Critics score", user_score = "Users score", developer = "Developer", genre = "Genre", players = "# of players", critics = "# of critics", users = "# of users", mdy(game_data$r.date) = "Release Date")
game_data_modified <- game_data %>% rename(name = Name, platform = Console, score = Critics score, user_score = Users score, developer = Developer, genre = Genre, players = Number of players, critics = Number of critics, users = Number of users, mdy(game_data$r.date) = Release Date)
game_data_modified <- game_data %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release Date)
game_data_modified <- game_data %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- game_data_modified %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- game_data_modified %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- game_data_modified %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- game_data_modified %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- game_data_modified %>% rename(name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- rename(game_data_modified, name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified = rename(game_data_modified, name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- game_data_modified[,-c(3)] # Eliminamos la columna extra de las fechas.
game_data_modified <- game_data %>% mutate(mdy(game_data$r.date))
str(game_data_modified) # Se creo el objeto para las fechas.
game_data_modified <- game_data_modified[,-c(3)] # Eliminamos la columna extra de las fechas.
game_data_modified = rename(game_data_modified, name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- rename(game_data_modified, name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- rename(game_data_modified, name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users, mdy(game_data$r.date) = Release_Date)
game_data_modified <- rename(game_data_modified, name = Name, platform = Console, score = Critics_score, user_score = Users_score, developer = Developer, genre = Genre, players = Number_of_players, critics = Number_of_critics, users = Number_of_users)
game_data_modified_new <- rename(game_data_modified, Name = name, Console = platform, Critics_score = score, Users_score = user_score, Developer = developer, Genre = genre, Number_of_players = players, Number_of_critics = critics, Number_of_users = users)
View(game_data_modified_new)
game_data_modified_new <- rename(game_data_modified, Name = name, Console = platform, Critics_score = score, Users_score = user_score, Developer = developer, Genre = genre, Number_of_players = players, Number_of_critics = critics, Number_of_users = users, Release_Date = mdy(game_data$r.date))
game_data_modified_new <- rename(game_data_modified, Name = name, Console = platform, Critics_score = score, Users_score = user_score, Developer = developer, Genre = genre, Number_of_players = players, Number_of_critics = critics, Number_of_users = users, Release_Date = "mdy(game_data$r.date)")
game_data_modified <- game_data_modified %>% rename(Name = name, Console = platform, Critics_score = score, Users_score = user_score, Developer = developer, Genre = genre, Number_of_players = players, Number_of_critics = critics, Number_of_users = users, Release_Date = "mdy(game_data$r.date)")
remove(game_data_modified_new)
str(game_data)
str(game_data_modified)
str(game_data_modified)
game_data_modified <- game_data_modified %>% mutate(as.numeric(Users_score))
game_data_modified <- game_data_modified[,-c(4)] # Se elimina la columna original.
game_data_modified <- game_data_modified %>% rename(Users_score = "as.numeric(Users_score)")
